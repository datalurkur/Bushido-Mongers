abstract root composition_root {
    has_many sym container_classes;
    has_many optional sym mutable_container_classes;
    has_many optional sym preserved_container_classes;
    has_many optional sym added_value_container_classes;

    uses composition;
}

/* The classic composition. */
abstract composition_root composition {
    container_classes             internal incidental external;
    /* Determines which components are modifiable after creation */
    mutable_container_classes                         external;
    /* Determines which components are destroyed if this item is destroyed */
    preserved_container_classes                       external;
    /* Determines whether the value of the contained item is added to the container */
    added_value_container_classes          incidental external;

    has_many optional sym internal;
    has_many optional sym incidental;
    has_many optional sym external;
}

abstract composition constructed {
    class_many sym required_components;
    class sym technique;

    has sym quality;

    needs components quality;

    uses constructed;
}

post_process {
    Log.debug("Propagating component information for constructed objects", 7)
    types_of(:constructed, true).each do |constructed|
        info_for(constructed, :required_components).each do |component|
            propagate_recursive(component) do |subtype|
                Log.debug("#{subtype} is used in #{constructed}", 7)
                name = :used_in
                modify_info(subtype, name, []) << constructed
            end
        end
    end
}
