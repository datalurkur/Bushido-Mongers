abstract item equipment {
    class sym slot;

    /* Protection can be based on a modifier manipulated by the material properties */
    class int protection;
    protection 0;

    size small;
}

abstract equipment headgear {
    slot head;
}

abstract equipment body_armor {
    slot humanoid_body;
}

abstract equipment bracer {
    slot arm;
}

abstract equipment glove {
    slot hand;
}

abstract equipment leg_armor {
    slot leg;
}

abstract equipment boots {
    slot foot;
}

abstract root weapon {
    /* TODO - Work out the slot (or slots) a weapon can go in based on its handedness */
    class sym handedness;
    class sym type;
}

abstract weapon melee_weapon {}

abstract weapon ranged_weapon {}

abstract root ammunition {}

constructed dagger_blade {
    required_components metal;
    technique forge;
}

constructed,melee_weapon dagger {
    type piercing;
    handedness one;
    required_components dagger_blade leather;
    technique craft;
}

constructed,melee_weapon hammer {
    type blunt;
    handedness one;
    technique craft;
}

constructed,ranged_weapon bow {
    type piercing;
    handedness two;
    technique bowmaking;
}

constructed,ammunition arrow {
    technique fletching;
}

post_process {
    self.find_subtypes(:equipment, {}, true).each do |equipment|
        Log.debug("Propagating slot information for #{equipment}")
        propagate_recursive(info_for(equipment, :slot)) do |subtype|
            Log.debug("#{subtype} can equip #{equipment}")
            name = :can_equip
            set_info(subtype, name, init_or_info(subtype, name, []) << equipment)
        end
    end
}
