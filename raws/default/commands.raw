abstract root command {
    class optional sym target;
    class_many optional sym components;
    class optional sym tool;
    class optional sym location;

    class sym invocation;
}

command attack {
    target corporeal;
    tool weapon;

    invocation attack;
}

command inspect {
    invocation inspect;
}

command move {
    invocation move;
}

command consume {
    target consumable;

    invocation consume;
}

abstract command construct {
    invocation construct;
}

construct cook {
}

construct forge {
    location anvil;
    tool hammer;
}

construct craft {}

construct make_bow {}

construct fletch {}

post_process {
    self.find_subtypes(:command, {}, true).each do |command|
        Log.debug("Propagating tool information for #{command}")
        propagate_recursive(info_for(command, :tool)) do |subtype|
            Log.debug("#{subtype} is a required tool for #{command}")
            info_for(subtype, :used_for, []) << command
        end

        Log.debug("Propagating target information for #{command}")
        propagate_recursive(info_for(command, :target)) do |subtype|
            Log.debug("#{subtype} is a target of #{command}")
            info_for(subtype, :target_of, []) << command
        end

        Log.debug("Propagating location information for #{command}")
        propagate_recursive(info_for(command, :location)) do |subtype|
            Log.debug("#{subtype} is the location at which #{command} happens")
            info_for(subtype, :location_of, []) << command
        end
    end
}
