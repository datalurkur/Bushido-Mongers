abstract command {
    class optional sym target;
    class_many optional sym components;
    class optional sym tool;
    class optional sym location;

    class optional sym invocation;
    class optional sym skill;
}

/* Info commands. */
static command stats {}
static command help {}

/* World-interaction commands. */

static command inspect {
    location composition;
}

static command move {}

static command attack {
    target object;
    location body_part;
    tool object; /* weapon-specific lookups happen if no tool is specified */
}

static command consume {
    target consumable;
}

static command get {
    target object;
}
static command stash {
    target object;
}
static command drop {
    target object;
}

static command equip {
    target object;
}
static command unequip {
    target object;
}

static command hide {}
static command unhide {}

static command open {
    target composition;
}
static command close {
    target composition;
}

/* PC-NPC Interactions. */

static command say {}
static command whisper {}

/* Item construction. */

abstract command construct {
    invocation construct;
}

static construct cook {}

static construct forge {
    location anvil;
    tool hammer;

    skill smithing;
}

static construct craft {
    skill crafting;
}

static construct make_bow {
    skill bowmaking;
}

static construct fletch {
    skill fletching;
}

post_process {
    Log.debug("Processing raw command information")
    self.static_types_of(:command).each do |command|
        Log.debug("Propagating tool information for #{command}", 6)
        tool_type = info_for(command, :tool)
        tools = tool_type ? instantiable_types_of(tool_type) : []
        tools.each do |subtype|
            Log.debug("#{subtype} is a required tool for #{command}", 6)
            name = :used_for
            modify_info(subtype, name, []) << command
        end

        Log.debug("Propagating target information for #{command}", 6)
        target_type = info_for(command, :target)
        targets = target_type ? instantiable_types_of(target_type) : []
        targets.each do |subtype|
            Log.debug("#{subtype} is a target of #{command}", 6)
            name = :target_of
            modify_info(subtype, name, []) << command
        end

        Log.debug("Propagating location information for #{command}", 6)
        location_type = info_for(command, :location)
        locations = location_type ? instantiable_types_of(location_type) : []
        locations.each do |subtype|
            Log.debug("#{subtype} is the location at which #{command} happens", 6)
            name = :location_of
            modify_info(subtype, name, []) << command
        end
    end
}
