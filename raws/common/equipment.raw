abstract item,loot equipment {
    class_many sym slot;

    /* Protection can be based on a modifier manipulated by the material properties */
    class int protection;
    protection 0;

    size small;

    class optional sym japanese_name;
}

abstract loot weapon {
    /* TODO - Work out the slot (or slots) a weapon can go in based on its handedness */
    class sym handedness;
    class sym type;

    class optional sym japanese_name;

    class sym length; /* in shaku */
    length 1; /* about a foot */
}

abstract weapon melee_weapon {}

abstract weapon ranged_weapon {}

abstract loot ammunition {}

post_process {
    self.find_subtypes(:equipment, {}, true).each do |equipment|
        Log.debug("Propagating slot information for #{equipment}", 6)
        propagate_recursive(info_for(equipment, :slot)) do |subtype|
            raise(StandardError, "Can't equip on unequippable part #{subtype}!") unless is_type?(subtype, :can_wear)
            Log.debug("#{subtype} can equip #{equipment}", 6)
            modify_info(subtype, :can_equip, []) << equipment
        end
    end
}
